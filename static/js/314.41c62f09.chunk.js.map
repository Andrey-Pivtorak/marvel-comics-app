{"version":3,"file":"static/js/314.41c62f09.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n          .then(onCharLoaded)\n          .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n          .then(onCharListLoaded)\n          .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n  }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                disabled={newItemLoading}\n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n      getCharacter(charId)\n        .then(onCharLoaded)\n        .then(() => setProcess('confirmed'));\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <meta\r\n            name=\"description\"\r\n            content=\"Marvel information portal\"\r\n          />\r\n          <title>Marvel information portal</title>\r\n        </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=9c469404afab5df835269a2246837329';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic\r\n  }\r\n}\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setProcess('loading');\r\n\r\n    try {\r\n        const response = await fetch(url, {method, body, headers});\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n    } catch(e) {\r\n        setProcess('error');\r\n        throw e;\r\n    }\r\n}, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n}\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;\n","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;\r\n"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","loading","error","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}